"use client"

import * as React from "react"
import { createContext, useContext, useState, ReactNode, HTMLAttributes } from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const SidebarContext = createContext<{
  open: boolean
  onOpenChange: (open: boolean) => void
}>({
  open: false,
  onOpenChange: () => {},
})

interface SidebarProviderProps {
  open?: boolean
  onOpenChange?: (open: boolean) => void
  children: ReactNode
}

const SidebarProvider = ({ open: defaultOpen, onOpenChange: defaultOnOpenChange, children }: SidebarProviderProps) => {
  const [open, setOpen] = useState(defaultOpen === undefined ? false : defaultOpen)

  const onOpenChange = (open: boolean) => {
    setOpen(open)
    defaultOnOpenChange?.(open)
  }

  return (
    <SidebarContext.Provider value={{ open, onOpenChange }}>
      {children}
    </SidebarContext.Provider>
  )
}

const useSidebarContext = () => {
  const context = useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebarContext must be used within a SidebarProvider")
  }
  return context
}

const sidebarVariants = cva(
  "fixed left-0 top-0 z-50 h-full w-72 border-r bg-background transition-transform duration-300 ease-in-out md:translate-x-0",
  {
    variants: {
      open: {
        true: "translate-x-0",
        false: "-translate-x-full",
      },
    },
    defaultVariants: {
      open: true,
    },
  }
)

interface SidebarProps extends HTMLAttributes<HTMLDivElement>, VariantProps<typeof sidebarVariants> {
  children: ReactNode
}

const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(({ className, children, ...props }, ref) => {
  const { open } = useSidebarContext()

  return (
    <div ref={ref} className={cn(sidebarVariants({ open }), className)} {...props}>
      {children}
    </div>
  )
})
Sidebar.displayName = "Sidebar"

interface SidebarContentProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode
}

const SidebarContent = React.forwardRef<HTMLDivElement, SidebarContentProps>(({ className, children, ...props }, ref) => {
  return (
    <div ref={ref} className={cn("flex-1 overflow-y-auto p-4", className)} {...props}>
      {children}
    </div>
  )
})
SidebarContent.displayName = "SidebarContent"

interface SidebarHeaderProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode
}

const SidebarHeader = React.forwardRef<HTMLDivElement, SidebarHeaderProps>(({ className, children, ...props }, ref) => {
  return (
    <div ref={ref} className={cn("flex items-center justify-between py-3 px-4", className)} {...props}>
      {children}
    </div>
  )
})
SidebarHeader.displayName = "SidebarHeader"

interface SidebarFooterProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode
}

const SidebarFooter = React.forwardRef<HTMLDivElement, SidebarFooterProps>(({ className, children, ...props }, ref) => {
  return (
    <div ref={ref} className={cn("border-t p-4", className)} {...props}>
      {children}
    </div>
  )
})
SidebarFooter.displayName = "SidebarFooter"

interface SidebarMenuProps extends HTMLAttributes<HTMLUListElement> {
  children: ReactNode
}

const SidebarMenu = React.forwardRef<HTMLUListElement, SidebarMenuProps>(({ className, children, ...props }, ref) => {
  return (
    <ul ref={ref} className={cn("space-y-1 py-2", className)} {...props}>
      {children}
    </ul>
  )
})
SidebarMenu.displayName = "SidebarMenu"

interface SidebarMenuItemProps extends HTMLAttributes<HTMLLIElement> {
  children: ReactNode
}

const SidebarMenuItem = React.forwardRef<HTMLLIElement, SidebarMenuItemProps>(({ className, children, ...props }, ref) => {
  return (
    <li ref={ref} className={cn("", className)} {...props}>
      {children}
    </li>
  )
})
SidebarMenuItem.displayName = "SidebarMenuItem"

interface SidebarMenuButtonProps extends HTMLAttributes<HTMLAnchorElement> {
  children: ReactNode
  isActive?: boolean
}

const sidebarMenuButtonVariants = cva(
  "group relative flex w-full items-center space-x-2 rounded-md p-2 text-sm font-medium hover:bg-secondary hover:text-foreground",
  {
    variants: {
      isActive: {
        true: "bg-secondary text-foreground",
        false: "bg-transparent",
      },
    },
    defaultVariants: {
      isActive: false,
    },
  }
)

const SidebarMenuButton = React.forwardRef<HTMLAnchorElement, SidebarMenuButtonProps>(
  ({ className, children, isActive, ...props }, ref) => {
    return (
      <a ref={ref} className={cn(sidebarMenuButtonVariants({ isActive }), className)} {...props}>
        {children}
      </a>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarProvider,
}

